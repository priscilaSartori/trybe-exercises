# Estrutura de Dados: Array
# Exerc√≠cio 1
# Tipos abstratos de dados possuem uma √∫nica implementa√ß√£o bem documentada?
# N√£o necessariamente. Um tipo abstrato de dados (TAD) √© uma abstra√ß√£o matem√°tica que descreve um conjunto de valores e opera√ß√µes sobre esses valores. Embora um TAD possa ser implementado de v√°rias maneiras, √© importante que sua interface seja bem definida e documentada, para que os usu√°rios do TAD possam us√°-lo de maneira consistente, independentemente da implementa√ß√£o subjacente. Uma implementa√ß√£o bem documentada √© importante pois permite que outros desenvolvedores entendam como usar e interagir com o TAD sem precisar conhecer os detalhes de implementa√ß√£o. Al√©m disso, uma documenta√ß√£o clara ajuda a garantir que o TAD seja implementado de maneira consistente e correta.

# Exerc√≠cio 2
# Listas(list), dicion√°rios(dict) e conjuntos(set), que j√° v√™m no Python, s√£o considerados tipos de dados? Caso negativo, justifique sua resposta.
# Sim, as listas list, dicion√°rios dict e conjuntos set s√£o considerados tipos de dados em Python. Na verdade, eles s√£o considerados estruturas de dados, que s√£o implementa√ß√µes de tipos abstratos de dados (TADs) em Python. Uma estrutura de dados √© uma forma de organizar e armazenar dados em um programa de computador. As listas, dicion√°rios e conjuntos s√£o exemplos comuns de estruturas de dados em Python, que permitem armazenar e manipular dados de maneiras diferentes. Por exemplo, uma lista √© uma estrutura de dados que permite armazenar uma sequ√™ncia ordenada de valores, acess√≠veis por √≠ndices num√©ricos. J√° um dicion√°rio √© uma estrutura de dados que permite armazenar pares chave-valor, onde cada valor √© acess√≠vel por sua chave correspondente. E um conjunto √© uma estrutura de dados que permite armazenar uma cole√ß√£o de valores √∫nicos, sem ordem espec√≠fica.

# Exerc√≠cio 3
# Que tal adicionarmos um m√©todo update que atualiza o valor a partir de um √≠ndice?
# üê¶ A assinatura deve ser def update(self, index, value):
# Para atualizar o valor de um elemento espec√≠fico em uma inst√¢ncia de Exemplo, podemos chamar o m√©todo update passando o √≠ndice e o novo valor como argumentos. Por exemplo:

class Exemplo:
    def __init__(self, value):
        self.value = value

    def update(self, index, value):
        self.value[index] = value

exemplo = Exemplo([1, 2, 3, 4, 5])
exemplo.update(2, 10)
print(exemplo.value)  # [1, 2, 10, 4, 5]

# üöÄExerc√≠cio 4
# Em um software monitor, o qual verifica a resili√™ncia de outro software, precisamos saber o tempo m√°ximo que um software permaneceu sem instabilidades. Para isto, a cada hora √© feito uma requisi√ß√£o ao sistema para verificamos se est√° tudo bem. Supondo um array que contenha os estados coletados por nosso software, calcule quanto tempo m√°ximo que o servidor permaneceu sem instabilidades.
# 1 - OK
# 0 - Instabilidades

# valores_coletados = [0, 1, 1, 1, 0, 0, 1, 1]
# resultado = 3

# valores_coletados = [1, 1, 1, 1, 0, 0, 1, 1]
# resultado = 4
# Fa√ßa a an√°lise de complexidade da sua solu√ß√£o.
# O algoritmo realiza um for, portanto possui Complexidade de Tempo O(n).

def verify_max_time_ok(collected_values):
    max_time = 0
    current_time = 0
    for value in collected_values:
        if value == 1:
            current_time += 1
        else:
            current_time = 0
        if current_time >= max_time:
            max_time = current_time
    return max_time

# Exerc√≠cio 5
# Em um jogo de baralho, as cartas est√£o representadas por um array num√©rico. Para iniciar o jogo, devemos embaralhar as cartas. Faremos isto dividindo uma por√ß√£o de cartas em 2 e depois mesclando as duas por√ß√µes. Por exemplo:
# Exemplo 1:
# cartas = [2, 6, 4, 5]
# cartas por parte = 2

# resultado = [2, 4, 6, 5]

# Exemplo 2:
# cartas = [1, 4, 4, 7, 6, 6]
# cartas por parte = 3

# resultado = [1, 7, 4, 6, 4, 6]
# Fa√ßa a an√°lise de complexidade da sua solu√ß√£o.
# O algoritmo realiza um for, portanto possui Complexidade de Tempo O(n).

def shuffle(items):
    answer = []
    div_cards_by_two = len(items) // 2
    for offset in range(div_cards_by_two):
        answer.extend(items[offset::div_cards_by_two])
    return answer
# Ao usar lista[come√ßo:fim:passo] n√≥s temos ‚Äúslices‚Äù, peda√ßos da lista que come√ßam em come√ßo (por padr√£o 0), terminam em fim (por padr√£o, at√© o fim da lista) e pula de passo em passo (por padr√£o, 1). ou seja, [11, 12, 21, 22, 31, 32][::2] resulta em [11, 21, 31].

# Exerc√≠cio 6
# Imagine que voc√™ esteja trabalhando em um e-commerce, e foi lhe dado a demanda de analisar um array de n√∫meros inteiros que representam os produtos dessa empresa. Verifique quantos produtos formam boas combina√ß√µes, ou seja, quando um produto √© igual ao outro e seu √≠ndice √© maior que o anterior. Esta combina√ß√£o pode ser utilizada para modificar os produtos de uma p√°gina. Por exemplo:
# Exemplo 1:
# produtos = [1, 3, 1, 1, 2, 3]
# resultado = 4
# Os √≠ndices (0, 2), (0, 3), (1, 5), (2, 3) formam combina√ß√µes.

# Exemplo 2:
# produtos = [1, 1, 2, 3]
# resultado = 1
# Os √≠ndices (0, 1) formam a √∫nica combina√ß√£o.
# Fa√ßa a an√°lise de complexidade da sua solu√ß√£o.
# O algoritmo realiza um for dentro de outro, portanto possui Complexidade de Tempo O(n¬≤).

def good_pairs(numbers):
    answer = 0
    i = 0
    size = len(numbers)
    for i in range(size):
        for j in range(i + 1, size):
            if numbers[i] == numbers[j]:
                answer += 1
    return answer

# Exerc√≠cio 7
# Voc√™ t√™m dois arrays de n√∫meros inteiros que representam:
# I - instantes de entrada e sa√≠das em uma biblioteca II - um n√∫mero que represente um instante a ser buscado.
# Retorne quantas pessoas estudantes est√£o na biblioteca naquele instante. Considere que todo estudante entrou e saiu da biblioteca.
# entradas = [1, 2, 3]
# saidas = [3, 2, 7]
# instante_buscado = 4
# resultado: 1

# O estudante 1 entrou no instante 1 e saiu no 3, j√° o segundo entrou
# e saiu no 2 e o √∫ltimo foi √∫nico a estar presente no instante 4.
# Fa√ßa a an√°lise de complexidade da sua solu√ß√£o.
# O algoritmo realiza um for, portanto possui Complexidade de Tempo O(n).

def students_in_instant(arrivals, departures, time_instant):
    answer = 0
    size = len(arrivals)
    for index in range(size):
        if arrivals[index] <= time_instant <= departures[index]:
            answer += 1
    return answer

# ou de uma maneira mais pythonica
def students_in_instant(arrivals, departures, time_instant):
    return sum(
        arrival <= time_instant <= departure
        for arrival, departure in zip(arrivals, departures)
    )

# Exerc√≠cio 8
# Em um software gerenciador de servidores, precisamos verificar o n√∫mero de servidores que se comunicam. Os servidores est√£o representados como um array bidimensional onde o valor 1 representa um computador e 0 a aus√™ncia do mesmo. Dois servidores se comunicam se eles est√£o na mesma linha ou mesma coluna.
# servidores =  [[1,0],[0,1]]
# resultado: 0
# Linhas e colunas s√£o diferentes.

# servidores = [[1,0],[1,1]]
# resultado: 3
# Todos os servidores se comunicam com ao menos um outro servidor.

# servidores = [[1, 0, 0],
#               [1, 0, 0],
#               [0, 0, 1]]
# resultado: 2
# O servidor de √≠ndice (2, 2) n√£o possui nenhum outro na mesma linha e coluna.
# Fa√ßa a an√°lise de complexidade da sua solu√ß√£o.
# O algoritmo recebe um array de arrays com tamanho n, que podem ter quantidades diferentes de linhas e colunas. Portanto possui Complexidade de Tempo O(n.m).

def count_servers(grid):
    rows, columns = len(grid), len(grid[0])
    servers_in_rows = [0 for _ in range(rows)]
    servers_in_columns = [0 for _ in range(columns)]

    for i in range(rows):
        for j in range(columns):
            if grid[i][j] == 1:
                servers_in_rows[i] += 1
                servers_in_columns[j] += 1

    answer = 0
    for i in range(rows):
        for j in range(columns):
            if grid[i][j] == 1 and (
                servers_in_rows[i] > 1 or servers_in_columns[j] > 1
            ):
                answer += 1

    return answer
