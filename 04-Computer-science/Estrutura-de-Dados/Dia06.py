# ğŸš€ ExercÃ­cio 1 - Blefe
# Blefe Ã© um jogo de duas pessoas onde cada uma tenta adivinhar os nÃºmero que a outra irÃ¡ escolher. Cada jogador escolhe 5 nÃºmeros de 0 a 10, inclusive. A pontuaÃ§Ã£o final Ã© calculada da seguinte forma:
# A nota de partida de cada pessoa Ã© o maior nÃºmero que a outra pessoa nÃ£o escolheu;
# O redutor Ã© o menor numero que a outra pessoa nÃ£o escolheu;
# A pontuaÃ§Ã£o final Ã© a nota de partida - redutor.

# Exemplo:
# clara = [0, 1, 5, 9, 10]
# nota de partida: 5
# redutor: 1
# pt: 4

# marco = [0, 2, 8, 9, 10]
# nota de partida: 8
# redutor: 2
# pt individual: 6

# Quem ganhou: Marco
# Implemente uma funÃ§Ã£o que receba um dicionÃ¡rio com os nomes e nÃºmeros chutados e retorne o nome de quem ganhou.

# entrada = {
#     'Clara': [0, 1, 5, 9, 10],
#     'Marco': [0, 2, 8, 9, 10]
# }

# saÃ­da: 'Marco'
# FaÃ§a a anÃ¡lise de complexidade da sua soluÃ§Ã£o.

# nota da partida
def nota_partida(escolhas, adivinhas):
    return max(escolhas.difference(adivinhas))


def nota_redutor(escolhas, adivinhas):
    return min(escolhas.difference(adivinhas))


def nota_individual(escolhas, adivinhas):
    set_escolhas = set(escolhas)
    set_adivinhas = set(adivinhas)

    return nota_partida(set_escolhas, set_adivinhas) - nota_redutor(
        set_escolhas, set_adivinhas
    )


def quem_ganhou_blefe(jogadas):
    jogadores = list(jogadas.keys())

    primeira_nota = nota_individual(
        jogadas[jogadores[0]], jogadas[jogadores[1]]
    )

    segunda_nota = nota_individual(
        jogadas[jogadores[1]], jogadas[jogadores[0]]
    )

    if primeira_nota > segunda_nota:
        return jogadores[0]
    elif primeira_nota < segunda_nota:
        return jogadores[1]
    else:
        return None


quem_ganhou = quem_ganhou_blefe(entrada)

if quem_ganhou:
    print(f"Quem ganhou: {quem_ganhou} ")
else:
    print("Deu empate")

# Resposta da anÃ¡lise de complexidade
# A funÃ§Ã£o nota_partida utiliza o mÃ©todo .difference do set que por sua vez possui Complexidade de Tempo O(len(s)), ou em outras palavras, a complexidade de tempo serÃ¡ a quantidade de elementos que estÃ¡ em s.
# A funÃ§Ã£o nota_redutor Ã© igual Ã  nota_partida. A diferenÃ§a Ã© que retorna o valor mÃ­nimo.
# A funÃ§Ã£o nota_individual cria duas sets, e como precisa percorrer as listas para criar os conjuntos, sua Complexidade de Tempo Ã© O(len(s) + len(t)).
# A funÃ§Ã£o quem_ganhou_blefe possui a variÃ¡vel jogadores que recebe uma lista com Complexidade de Tempo O(n), e as variÃ¡veis primeira_nota e segunda_nota que recebem o mÃ©todo nota_individual que possui Complexidade de Tempo Ã© O(len(s) + len(t)), que prevalece.


# ExercÃ­cio 2 - Substring
# Dada uma string, ache o tamanho da maior substring que nÃ£o tenha caracteres repetidos. Complexidade de tempo limite aceitÃ¡vel: O(nÂ²).
# string = "serdevemuitolegalmasehprecisoestudarbastante"
# FaÃ§a a anÃ¡lise de complexidade da sua soluÃ§Ã£o.

def longer_no_repeating_substring_len(string):
    biggest = 0
    for index, _ in enumerate(string):
        substr = set()
        for letter in string[index:]:
            if letter in substr:
                break
            substr.add(letter)
        if len(substr) > biggest:
            biggest = len(substr)
    return biggest
  
# Resposta da anÃ¡lise de complexidade
# A funÃ§Ã£o longer_no_repeating_substring_len realiza dois fors um dentro do outro, e por isso sua Complexidade de Tempo Ã© O(nÂ²).
