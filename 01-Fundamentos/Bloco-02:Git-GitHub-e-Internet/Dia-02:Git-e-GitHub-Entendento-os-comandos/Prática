# Exerc√≠cio 1
Utilizar o projeto com o texto no arquivo .txt, localizado dentro do diret√≥rio do dia anterior, crie uma c√≥pia para usar no dia de hoje.

# Exerc√≠cio 1
Navegue at√© a raiz do projeto com o arquivo .txt;

# Exerc√≠cio 1
Verifique se n√£o existe nada sem "commitar" utilizando git status:

# Exerc√≠cio 1
Caso exista algo, verifique se √© necess√°rio e fa√ßa o commit, ou remova-o.

# Exerc√≠cio 1
Crie uma nova branch com o nome trybe-skills-changes e fa√ßa checkout nela;


# Exerc√≠cio 1
No arquivo .txt, ao final da lista de habilidades , adicione mais duas habilidades que ser√£o desenvolvidas na Trybe:
Exemplo:
O que eu vou aprender na Trybe:
- Unix
- Bash
- Git
- HTML
- CSS


# Exerc√≠cio 1
Fa√ßa um git add nome-do-arquivo.extensao;


# Exerc√≠cio 1
Voc√™ pode adicionar todos os arquivos que voc√™ modificou usando git add ., mas evite isso em commits com muitos arquivos para n√£o adicionar nenhuma altera√ß√£o por engano;


# Exerc√≠cio 1
Agora um git commit -m "Mensagem que voc√™ gostaria";


# Exerc√≠cio 1
Uma boa pr√°tica √© sempre resumir o que o seu commit est√° alterando, por exemplo, git commit -m "Adiciona nova skill";
Evite juntar muitas modifica√ß√µes em um √∫nico commit. Assim, caso haja algum erro no c√≥digo, ficar√° mais f√°cil visualizar em qual altera√ß√£o ele surgiu;


# Exerc√≠cio 1
E por √∫ltimo um git push -u origin trybe-skills-changes;


# Exerc√≠cio 1
Abra um Pull Request com uma descri√ß√£o detalhada:
D√™ contexto para o que voc√™ est√° fazendo, passe links ou cite especifica√ß√µes que forem relevantes. Ex: "Trabalho feito para a semana 1 do curso de Software Developer da Trybe. Aqui, o desafio foi... E para resolver o problema fizemos... E o resultado foi...";


# Exerc√≠cio 1
Retorne para a branch principal, master, com o comando: git checkout master;


# Exerc√≠cio 1
Verifique que voc√™ est√° na branch master, com o comando: git branch (esta branch deve estar com o formato original, sem as habilidades rec√©m adicionadas);


# Exerc√≠cio 1
Crie uma nova branch trybe-skills-updates a partir da master e fa√ßa checkout nela;


# Exerc√≠cio 1
No mesmo arquivo .txt que voc√™ modificou no passo 4, tamb√©m ao final da sua lista de habilidades, adicione mais um aprendizado que voc√™ ter√° nos pr√≥ximos blocos:
Aten√ß√£o! Aqui o arquivo n√£o ter√° as altera√ß√µes feitas anteriormente na outra branch üòâ;


# Exerc√≠cio 1
Fa√ßa um git add nome-do-arquivo.extensao;


# Exerc√≠cio 1
Agora um git commit -m "Mensagem que voc√™ gostaria";


# Exerc√≠cio 1
e por √∫ltimo um git push -u origin trybe-skills-updates;


# Exerc√≠cio 1
Ap√≥s o primeiro "push" da sua branch, voc√™ pode usar apenas o comando git push;


# Exerc√≠cio 1
Abra um Pull Request com uma descri√ß√£o amig√°vel:


# Exerc√≠cio 1
O merge deve ser feito apenas quando chegar no exerc√≠cio 10;


# Exerc√≠cio 1
Agora, fa√ßa o merge das branches trybe-skills-changes e trybe-skills-updates na branch master, atrav√©s do Pull Request:


# Exerc√≠cio 1
Primeiro, v√° at√© a p√°gina do primeiro Pull Request (branch trybe-skills-changes) e fa√ßa o merge clicando no bot√£o verde "Merge pull request";


# Exerc√≠cio 1
Agora, v√° at√© p√°gina do outro Pull Request (branch trybe-skills-updates) e tente fazer o merge clicando no mesmo bot√£o. Reparou que ele est√° bloqueado? Isso acontece porque esse Pull Request est√° tentando alterar a mesma linha de c√≥digo com um conte√∫do diferente, e o Git n√£o consegue determinar sozinho qual das duas linhas √© a correta;


# Exerc√≠cio 1
Voc√™ ter√° que resolver esse conflito antes de "mergear" o Pull Request. Clique no bot√£o "Resolve conflicts", escolha uma das duas vers√µes do texto (lembre-se de apagar as linhas com <<<<<<< e >>>>>>>, elas s√£o criadas apenas para dar uma identifica√ß√£o mais visual ao problema) . Depois clique em "Mark as resolved" e, em seguida, em "Commit merge";


# Exerc√≠cio 1
Agora voc√™ deve conseguir "mergear" seu Pull Request normalmente. üòé
