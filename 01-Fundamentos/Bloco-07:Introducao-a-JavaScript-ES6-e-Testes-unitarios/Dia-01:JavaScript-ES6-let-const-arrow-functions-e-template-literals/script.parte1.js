//Exerc√≠cio 1
// üöÄ Altere o tipo das vari√°veis(var) para let ou const para que respeitem o escopo em que foram declaradas, e altere a fun√ß√£o utilizando arrow function e template literals.
// Modifique a estrutura da fun√ß√£o para que ela seja uma arrow function;
// Modifique as vari√°veis para que respeitem o escopo onde est√£o declaradas;
// Modifique as concatena√ß√µes para template literals.

// Solu√ß√£o:
// Primeiro passo: Modifique a estrutura da fun√ß√£o para que ela seja uma arrow function.
// Segundo passo: Altere as concatena√ß√µes para template literals.
// Terceiro passo: Altere a vari√°vel do tipo var, ifScope para let e elseScope, para const.
// Dessa forma elas n√£o vazam o escopo do if e else.
// Quarto passo: Retire o console.log que est√° fora do if/else
// Agora que as vari√°veis ifScope e elseScope foram alteradas para respeitarem o escopo, voc√™ deve retirar o console.log que est√° fora do if/else para que seu c√≥digo consiga ser executado sem nenhum erro, pois essas vari√°veis n√£o s√£o mais acess√≠veis fora de seu escopo.

const testingScope = (escopo) => {
    if (escopo === true) {
      let ifScope = 'N√£o devo ser utilizada fora do meu escopo (if)';
      ifScope = `${ifScope} √≥timo, fui utilizada no escopo !`;
      console.log(ifScope);
    } else {
      let elseScope = 'N√£o devo ser utilizada fora meu escopo (else)';
      console.log(elseScope);
    }
  }

  testingScope(true);

//Exerc√≠cio 2
//   üöÄ Crie uma fun√ß√£o que retorne um array em ordem crescente.
// Crie uma fun√ß√£o que fa√ßa com que o array oddsAndEvens fique em ordem crescente;
// Utilize template literals para que a chamada console.log(<seu c√≥digo>oddsAndEvens<seu c√≥digo>); retorne a frase "Os n√∫meros 2,3,4,7,10,13 se encontram ordenados de forma crescente!".
// B√¥nus (opcional): tente fazer o mesmo exerc√≠cio utilizando o m√©todo array.sort(). Spoiler: √â poss√≠vel realizar uma fun√ß√£o que ordene qualquer array de n√∫meros.

// Solu√ß√£o 1:
// Primeiro passo: Crie a fun√ß√£o sortOddsAndEvens() que receber√° um array por par√¢metro.
// Segundo passo: Utilize uma primeira estrutura de repeti√ß√£o for que far√° a itera√ß√£o sobre o array passado por par√¢metro.
// Terceiro passo: Utilize agora uma segunda estrutura de repeti√ß√£o for, aninhada √† primeira, que tamb√©m far√° a itera√ß√£o sobre o array.
// Quarto passo: Crie ent√£o uma estrutura condicional if/else no escopo do segundo for que far√° a compara√ß√£o dos valores das posi√ß√µes dos respectivos index, sendo o primeiro loop for come√ßando pelo index 1 e o segundo loop for come√ßando pelo index 0.
// Quinto passo: Retorne o resultado do array ordenado.
// Sexto passo: Imprima no terminal o retorno da fun√ß√£o.

  const oddsAndEvens = [13, 3, 4, 10, 7, 2];
  const sortOddsAndEvens = (array) => {
    for (let index = 1; index < array.length;index += 1) {
        for (let index2 = 0; index2 <   index; index2 += 1) {
            if (array[index] < array[secondIndex]) {
                let position = array[index];
                array[index] = array[secondIndex];
                array[secondIndex] = position;
            }  
        }
    }
    return array;
}
console.log(sortOddsAndEvens(array));

//  Solu√ß√£o 2:
// Primeiro passo: Reatribua os valores de cada posi√ß√£o do array oddsAndEvens, fazendo com que os n√∫meros fiquem ordenados de forma crescente.
// Segundo passo: Armazene o valor retornado pela fun√ß√£o sortOddsAndEvens em uma vari√°vel.
// Terceiro passo: Agora voc√™ deve utilizar template literals para exibir a mensagem desejada.

const oddsAndEvens = [13, 3, 4, 10, 7, 2];

  const sortOddsAndEvens = () => {  
    oddsAndEvens[0] = 2;
    oddsAndEvens[1] = 3;
    oddsAndEvens[2] = 4;
    oddsAndEvens[3] = 7;
    oddsAndEvens[4] = 10;
    oddsAndEvens[5] = 13;

    return oddsAndEvens;
  };

  const sortedArray = sortOddsAndEvens(); 
  console.log(`Os n√∫meros ${sortedArray} se encontram ordenados de forma crescente!`);

// B√¥nus array.sort()
const oddsAndEvens = [13, 3, 4, 10, 7, 2];

const sortArrayBonus = (array) => {
  const sortOddsAndEvens = array.sort((a, b) => a - b);
  return sortOddsAndEvens;
};

const sortedArrayBonus = sortArrayBonus(oddsAndEvens);
console.log(`Os n√∫meros ${sortedArrayBonus} se encontram ordenados de forma crescente!`);

// array.sort com sort em uma linha.
const oddsAndEvens = [13, 3, 4, 10, 7, 2];
console.log(`Os n√∫meros ${oddsAndEvens.sort((a, b) => a - b)} se encontram ordenados de forma crescente!`);

// Crie uma fun√ß√£o que substitua a letra 'x' em uma frase.
// O nome da fun√ß√£o dever√° ser substituaX;
// A fun√ß√£o dever√° receber um nome por par√¢metro;
// Declare dentro da fun√ß√£o uma vari√°vel do tipo const, com o nome frase, atribuindo o valor 'Tryber x aqui!';
// A fun√ß√£o dever√° retornar uma nova frase onde o x da frase 'Tryber x aqui!' seja substitu√≠do pelo nome passado por par√¢metro.
// Exemplo:
// Par√¢metro: 'Bebeto'
// Retorno: 'Tryber Bebeto aqui!'
// Spoiler: O m√©todo split() pode ser utilizado de diferentes maneiras, como separar as palavras de um texto.

// Primeiro passo: Crie a fun√ß√£o que ir√° receber um nome por par√¢metro e crie a constante frase dentro dela.
// Segundo passo: Transforme a string armazenada na constante frase em um array.
// Terceiro passo: Crie uma estrutura de repeti√ß√£o para percorrer a vari√°vel fraseArray.
// Quarto passo: Crie uma estrutura condicional
// Verifique se a vari√°vel fraseArray na posi√ß√£o do index √© igual a x;
// Caso seja, substitua o valor da vari√°vel fraseArray na posi√ß√£o do index pelo nome passado por par√¢metro.
// Quinto passo: Transforme a vari√°vel fraseArray em uma string e a retorne.

const substituaX = (nome) => {
  const frase = 'Tryber x aqui!';
  const fraseArray = frase.split(' ');
  for (let index = 0; index < fraseArray.length; index += 1) {
    if (fraseArray[index] === 'x') {
      fraseArray[index] = nome;
    }
  }  
  return fraseArray.join(' ');
};

console.log(substituaX('Bebeto'));


// Crie uma fun√ß√£o que ir√° receber o retorno da Fun√ß√£o 1 por par√¢metro e retornar√° uma nova string.
// O nome da fun√ß√£o dever√° ser minhasSkills;
// A fun√ß√£o dever√° receber o retorno da Fun√ß√£o 1 - substituaX por par√¢metro;
// Declare dentro da fun√ß√£o uma vari√°vel com o nome skills, do tipo const;
// A vari√°vel skills dever√° ser um array contendo tr√™s strings com tecnologias que voc√™ j√° aprendeu.
// Crie uma var√°vel do tipo let e concatene o valor retornado da Fun√ß√£o 1 - substituaX (utilize template literals), a frase 'Minhas tr√™s principais habilidades s√£o:' e o valor da vari√°vel skills.
// Exemplo de retorno:
// Tryber Bebeto aqui!
// Minhas tr√™s principais habilidades s√£o:
// JavaScript
// HTML
// CSS

const substituaX = (nome) => {
  const frase = 'Tryber x aqui!';
  const fraseArray = frase.split(' ');
  for (let index = 0; index < fraseArray.length; index += 1) {
    if (fraseArray[index] === 'x') {
      fraseArray[index] = nome;
    }
  }  
  return fraseArray.join(' ');
};

(substituaX('Bebeto'));

const minhasSkills = (func) => {
  const skills = ['JavaScript', 'HTML', 'CSS'];
  let resultado = `
  ${func}

  Minhas tr√™s principais habilidades s√£o:`;

  for (let index = 0; index < skills.length; index += 1) {
    resultado = `${resultado}
    - ${skills[index]}`; 
  }
  return resultado;
};

console.log(minhasSkills(substituaX('Bebeto')));